<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Exam</title>
    <link rel="stylesheet" href="../../../css_files/exam_css.css">
</head>
<body>
    <div class="exam-container">
        <header>
            <div id="timer">
                <img src="https://img.icons8.com/?size=100&id=43987&format=png&color=000000" alt="Timer Icon">
                <span>00:00</span>
            </div>
            <h1>Online Exam</h1>
        </header>
        
        <main>
            <aside class="question-nav">
                <h2>Questions</h2>
                <div class="question-status-container">
                    <% for (let i = 0; i < exam.questions.length; i++) { %>
                        <div class="question-status" id="question-<%= i %>">
                            <%= i + 1 %>
                        </div>
                    <% } %>
                </div>
                <div class="legend">
                    <div class="legend-item"><span class="status-dot red"></span>Not answered</div>
                    <div class="legend-item"><span class="status-dot green"></span>Answered</div>
                    <div class="legend-item"><span class="status-dot grey"></span>Not visited</div>
                </div>
            </aside>
            
            <section class="question-area">
                <div id="question-container">
                    <h2 id="question-text"></h2>
                    <div id="options-container"></div>
                </div>
                <div class="navigation-buttons">
                    <button id="back-button" class="nav-button" disabled>Back<img src="../../../icons/back.png" alt="back icon"></button>
                    <button id="next-button" class="nav-button">Next<img src="../../../icons/next.png" alt="next icon"></button>
                </div>
                <button id="submit-exam" class="submit-button">
                    Submit
                    <img src="../../../icons/exams.png" alt="Submit icon">
                </button>
            </section>
        </main>
    </div>

    <script>
        const examData = <%- JSON.stringify(exam) %>; 
        const studentData = <%- JSON.stringify(student) %>; 
        console.log(examData.timeLimit);
        
        let totalSeconds = examData.timeLimit * 60;
        const timerElement = document.getElementById("timer");

        const questionStatuses = new Array(examData.questions.length).fill("none");
        const studentAnswers = new Array(examData.questions.length).fill(null);

        let currentQuestionIndex = 0;
        displayQuestion(currentQuestionIndex);

        let timerInterval;
        function startTimer() {
            timerInterval = setInterval(() => {
                if (totalSeconds <= 0) {
                    clearInterval(timerInterval);
                    alert("Time's up!");
                    submitExam();
                } else {
                    const minutes = Math.floor(totalSeconds / 60);
                    const seconds = totalSeconds % 60;
                    timerElement.innerHTML = `<img src="https://img.icons8.com/?size=100&id=43987&format=png&color=000000" alt="Timer Icon">${minutes}:${seconds < 10 ? '0' : ''}${seconds}s`;
                    totalSeconds--;
                }
            }, 1000);
        }

        function displayQuestion(index) {
            const question = examData.questions[index];
            document.getElementById("question-text").innerHTML = question.questionText;

            const optionsContainer = document.getElementById("options-container");
            optionsContainer.innerHTML = "";

            question.options.forEach((option, i) => {
                const optionElement = document.createElement("div");
                optionElement.innerHTML = `
                    <input type="radio" name="options" id="option-${i}" value="${option.optionText}" ${studentAnswers[index] === option.optionText ? 'checked' : ''}>
                    <label for="option-${i}">${option.optionText}</label>
                `;
                optionsContainer.appendChild(optionElement);
            });

            if (questionStatuses[index] === "none") {
                questionStatuses[index] = "visited-not-answered";
                updateQuestionStatus(index, questionStatuses[index]);
            }

            document.getElementById("back-button").disabled = index === 0;
            document.getElementById("next-button").disabled = index === examData.questions.length - 1;
        }

        document.getElementById("next-button").onclick = function() {
            const selectedOption = document.querySelector('input[name="options"]:checked');
            if (selectedOption) {
                studentAnswers[currentQuestionIndex] = selectedOption.value;
                questionStatuses[currentQuestionIndex] = "visited-answered";
                updateQuestionStatus(currentQuestionIndex, questionStatuses[currentQuestionIndex]);
            }

            if (currentQuestionIndex < examData.questions.length - 1) {
                currentQuestionIndex++;
                displayQuestion(currentQuestionIndex);
            }
        };

        document.getElementById("back-button").onclick = function() {
            const selectedOption = document.querySelector('input[name="options"]:checked');
            if (selectedOption) {
                studentAnswers[currentQuestionIndex] = selectedOption.value;
                questionStatuses[currentQuestionIndex] = "visited-answered";
                updateQuestionStatus(currentQuestionIndex, questionStatuses[currentQuestionIndex]);
            }

            if (currentQuestionIndex > 0) {
                currentQuestionIndex--;
                displayQuestion(currentQuestionIndex);
            }
        };

        function updateQuestionStatus(questionIndex, status) {
            const questionBox = document.getElementById(`question-${questionIndex}`);
            if (status === "visited-not-answered") {
                questionBox.style.backgroundColor = "red";
            } else if (status === "visited-answered") {
                questionBox.style.backgroundColor = "green";
            } else {
                questionBox.style.backgroundColor = "grey";
            }
        }

        async function submitExam() {
    const confirmSubmit = confirm("Are you sure you want to submit your exam? You cannot change your answers after submission.");
    if (confirmSubmit) {
        const selectedOption = document.querySelector('input[name="options"]:checked');
        if (selectedOption) {
            studentAnswers[currentQuestionIndex] = selectedOption.value;
            questionStatuses[currentQuestionIndex] = "visited-answered";
            updateQuestionStatus(currentQuestionIndex, questionStatuses[currentQuestionIndex]);
        }

        document.querySelectorAll('input[type="radio"]').forEach(input => input.disabled = true);
        document.getElementById('back-button').disabled = true;
        document.getElementById('next-button').disabled = true;
        document.getElementById('submit-exam').disabled = true;

        clearInterval(timerInterval);

        const examSubmission = {
            studentId: studentData._id,
            examId: examData.Exam_id, // Ensure it's Exam_id (not exam_name)
            answers: studentAnswers,
            timeSpent: examData.timeLimit * 60 - totalSeconds
        };

        // Send POST request to the backend using fetch
        try {
            const response = await fetch('/Exam/submit', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(examSubmission)
            });

            if (response.ok) {
                const data = await response.json();
                alert(`${data.message}`);
                if (data.redirect) {
                    window.location.href = data.redirect;
                }

            } else {
                const errorData = await response.json(); // Capture error message from response
                alert("Error submitting exam: " + errorData.message);
            }
        } catch (error) {
            console.error('Error:', error);
            alert('An unexpected error occurred.');
        }
    }
}

        document.getElementById('submit-exam').addEventListener('click', submitExam);

        window.onload = startTimer;
    </script>
</body>
</html>